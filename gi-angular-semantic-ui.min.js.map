/**
 * gi-semantic-ui-angular - 1.0.0
 * Angular1 Directives for Semantic UI
 * 
 * https://github.com/ginvoicing/gi-semantic-ui-angular
 * Released under the MIT license.
 * Copyright 2018 Ginvoicing and contributors.
 */
{"version":3,"sources":["gi.js","gi-core.js","inputs/gi-checkbox.js","inputs/gi-dropdown.js","inputs/gi-radio.js"],"names":["angular","module","app","SemanticUIFactory","$compile","SemanticUI","setDefaultFunction","scope","variable","attributes","func","triggerChange","element","initialized","$watch","updated","$evalAsync","trigger","bindAttribute","attribute","attr","onEvent","settings","evt","existing","undefined","result0","isFunction","apply","this","arguments","result1","linkEvents","defaults","linkings","scopeValue","linkSettings","settingsAttribute","forEach","value","key","createBind","restrict","link","initBind","ready","input","$eval","createBehavior","method","initBehavior","$","enabled","previousEvent","isString","isObject","isDefined","off","on","watcher","expression","context","force","equals","currentValue","copy","call","set","update","RecursiveCompiler","postLink","post","compiledContents","contents","remove","pre","clone","append","SemanticButton","replace","transclude","template","SemanticItem","icon","SemanticFlatMenu","join","SemanticHtml","$injector","sanitize","$sce","get","getTrustedHtml","trustAsHtml","e","attrs","smHtml","html","factory","directive","SemanticCheckboxBind","SemanticCheckbox","SemanticCheckboxLink","model","label","indeterminateValue","checkedValue","uncheckedValue","children","onInit","onChange","onChecked","onIndeterminate","onDeterminate","onUnchecked","onEnable","onDisable","enabledWatcher","checkbox","modelWatcher","fn","$children","settingChildren","change","checked","each","i","child","length","BEHAVIORS","giCheckboxToggle","giCheckboxCheck","giCheckboxUncheck","giCheckboxIndeterminate","giCheckboxDeterminate","giCheckboxEnable","giCheckboxDisable","SemanticDropdownBind","SemanticDropdown","SemanticDropdownLink","items","defaultText","emptyValue","onAdd","onRemove","onLabelCreate","onLabelSelect","onNoResults","onShow","onHide","controller","SemanticDropdownController","$scope","hashMap","getValue","item","getKey","$$hashKey","isEmpty","translateValue","translated","matching","findMatchingItem","hasDefault","getDefaultText","updateHashMap","$timeout","applyValue","dropdown","Array","translatedValue","push","locals","ignoreChange","modelArray","mapped","mappedValue","indexOf","inArray","splice","giDropdownToggle","giDropdownShow","giDropdownHide","giDropdownClear","giDropdownHideOthers","giDropdownRestoreDefaults","giDropdownRestoreDefaultText","giDropdownRestoreDefaultValue","giDropdownSaveDefaults","giDropdownSetSelected","giDropdownSetText","giDropdownSetValue","giDropdownBindTouchEvents","giDropdownMouseEvents","giDropdownBindIntent","giDropdownUnbindIntent","giDropdownSetActive","giDropdownSetVisible","giDropdownRemoveActive","giDropdownRemoveVisible","SemanticRadioBind","SemanticRadio","SemanticRadioLink","name","hasClass","removeClass","giRadioCheck","giRadioEnable","giRadioDisable"],"mappings":"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","file":"gi-angular-semantic-ui.min.js","sourcesContent":["\nangular.module('semantic-ui', [\n  'semantic-ui-core',\n  'semantic-ui-checkbox',\n  'semantic-ui-radio',\n  'semantic-ui-dropdown',\n]);\n","(function(app)\n{\n\n  app\n    .factory('SemanticUI', ['$compile', SemanticUIFactory])\n    .directive('smButton', SemanticButton)\n    .directive('smMenuItem', SemanticItem)\n    .directive('smFlatMenu', SemanticFlatMenu)\n    .directive('smHtml', ['$injector', SemanticHtml])\n  ;\n\n  function SemanticUIFactory($compile)\n  {\n    var SemanticUI =\n    {\n      setDefaultFunction: function(scope, variable, attributes, func)\n      {\n        if ( !attributes[ variable ] )\n        {\n          scope[ variable ] = func;\n        }\n      },\n      triggerChange: function(scope, variable, element, initialized)\n      {\n        scope.$watch( variable, function(updated)\n        {\n          // Don't trigger the change event if the element hasn't been initialized.\n          if ( initialized )\n          {\n            // Trigger the change event during a digest cycle so any other\n            // variables that are changing this current digest cycle can finish.\n            scope.$evalAsync(function()\n            {\n              element.trigger('change');\n            });\n          }\n\n          initialized = true;\n        })\n      },\n      bindAttribute: function(scope, variable, element, attribute)\n      {\n        scope.$watch( variable, function(updated)\n        {\n          element.attr( attribute, updated );\n        });\n      },\n      onEvent: function(settings, evt, func)\n      {\n        settings[ evt ] = (function(existing, undefined)\n        {\n          return function EventHandler()\n          {\n            var result0 = undefined;\n\n            if ( angular.isFunction( existing ) )\n            {\n              result0 = existing.apply( this, arguments );\n            }\n\n            var result1 = func.apply( this, arguments );\n\n            return ( result0 !== undefined ? result0 : result1 );\n          }\n        })( settings[ evt ] );\n      },\n      linkEvents: function(scope, settings, defaults, linkings)\n      {\n        for (var evt in linkings)\n        {\n          (function(variable, evt)\n          {\n            SemanticUI.onEvent( settings, evt, function()\n            {\n              var scopeValue = scope[ variable ];\n\n              if ( angular.isFunction( scopeValue ) )\n              {\n                return scopeValue.apply( this, arguments );\n              }\n              else if ( angular.isFunction( defaults[ evt ] ) )\n              {\n                return defaults[ evt ].apply( this, arguments );\n              }\n            });\n\n          })( linkings[ evt ], evt );\n        }\n      },\n      linkSettings: function(scope, element, attributes, module, initialized, settingsAttribute)\n      {\n        var settings = settingsAttribute || 'settings';\n\n        if ( settings in attributes )\n        {\n          scope.$watch( settings, function( updated )\n          {\n            if ( initialized )\n            {\n              angular.forEach( updated, function(value, key)\n              {\n                element[ module ]( 'setting', key, value );\n              });\n            }\n\n            initialized = true;\n\n          }, true );\n        }\n      },\n      createBind: function(attribute, module)\n      {\n        return {\n\n          restrict: 'A',\n\n          link: function(scope, element, attributes)\n          {\n            SemanticUI.linkSettings( scope, element, attributes, module, false, attribute );\n            SemanticUI.initBind( scope, element, attributes, attribute, module );\n          }\n        };\n      },\n      initBind: function(scope, element, attributes, attribute, module)\n      {\n        element.ready(function()\n        {\n          var settings = {};\n          var input = attributes[ attribute ];\n\n          if ( input )\n          {\n            settings = scope.$eval( input );\n          }\n\n          element[ module ]( settings );\n        });\n      },\n      createBehavior: function(attribute, module, method)\n      {\n        return {\n\n          restrict: 'A',\n\n          link: function(scope, element, attributes)\n          {\n            SemanticUI.initBehavior( scope, attributes, attribute, element, module, method );\n          }\n        };\n      },\n      initBehavior: function(scope, attributes, attribute, element, module, method)\n      {\n        // Default settings on the attribute.\n        var settings = {\n          $: undefined,\n          evt: 'click',\n          enabled: true,\n          value: undefined\n        };\n\n        var onEvent = function()\n        {\n          // If the trigger is currently enabled...\n          if ( settings.enabled )\n          {\n            // Call the method on the module.\n            $( settings.$ )[ module ]( method, settings.value );\n          }\n        };\n\n        var previousEvent = false;\n\n        scope.$watch( attributes[ attribute ], function(input)\n        {\n          // If the attribute value is a string, take it as the selector\n          if ( angular.isString( input ) )\n          {\n            settings.$ = input;\n          }\n          // If the attribute value is an object, overwrite the defaults.\n          else if ( angular.isObject( input ) )\n          {\n            if ( !angular.isString( input.evt ) ) input.evt = settings.evt;\n            if ( !angular.isDefined( input.enabled ) ) input.enabled = settings.enabled;\n\n            settings = input;\n          }\n\n          if ( previousEvent )\n          {\n            element.off( previousEvent, onEvent );\n          }\n\n          element.on( previousEvent = settings.evt, onEvent );\n\n        }, true );\n      },\n      watcher: function (scope, expression, func, context, force, equals) \n      {\n          var currentValue = angular.copy(scope[expression]);\n\n          scope.$watch(expression, function (updated) \n          {\n              if (expression != 'model' || !angular.equals(currentValue, updated)) \n              {\n                  func.call(context, updated);\n              }\n\n          }, equals);\n\n          return {\n              set: function (value) \n              {\n                  if (scope[expression] != value || force) \n                  {\n                      scope.$evalAsync(function () \n                      {\n                          scope[expression] = value;\n                          currentValue = angular.copy(scope[expression]);\n                      });\n                  }\n              },\n              update: function () \n              {\n                  scope.$evalAsync(function () \n                  {\n                  });\n              }\n          }\n      },\n      RecursiveCompiler: function(postLink)\n      {\n        return function(element, link)\n        {\n          // Normalize the link parameter\n          if( angular.isFunction( link ) )\n          {\n              link = { post: link };\n          }\n\n          // Break the recursion loop by removing the contents\n          var contents = element.contents().remove();\n          var compiledContents;\n\n          return {\n              pre: (link && link.pre) ? link.pre : null,\n              /**\n               * Compiles and re-adds the contents\n               */\n              post: function(scope, element)\n              {\n                  // Compile the contents\n                  if( !compiledContents )\n                  {\n                      compiledContents = $compile(contents);\n                  }\n\n                  // Re-add the compiled contents to the element\n                  compiledContents( scope, function(clone)\n                  {\n                      element.append(clone);\n                  });\n\n                  // Call the post-linking function, if any\n                  if ( link && link.post )\n                  {\n                      link.post.apply( null, arguments );\n                  }\n\n                  if ( angular.isFunction( postLink ) )\n                  {\n                    postLink.apply( null, arguments );\n                  }\n              }\n          };\n        };\n      }\n    };\n\n    return SemanticUI;\n  }\n\n  function SemanticButton()\n  {\n    return {\n\n      restrict: 'E',\n\n      replace: true,\n\n      transclude: true,\n\n      template: '<button class=\"ui button\" ng-transclude></button>'\n    };\n  }\n\n  function SemanticItem()\n  {\n    return {\n\n      restrict: 'E',\n\n      replace: true,\n\n      transclude: true,\n\n      scope: {\n        icon: '@'\n      },\n\n      template: '<a class=\"item\"><i class=\"{{ icon }} icon\" ng-if=\"icon\"></i><span ng-transclude></span></a>'\n    }\n  }\n\n  function SemanticFlatMenu()\n  {\n    return {\n\n      restrict: 'E',\n\n      replace: true,\n\n      template: [\n        '<div class=\"menu\">',\n        '  <div class=\"item\" ng-repeat=\"item in items\" data-value=\"{{ getValue(item) }}\" sm-html=\"label({item:item})\"></div>',\n        '</div>'\n      ].join('\\n')\n    }\n  }\n\n  function SemanticHtml($injector)\n  {\n    var sanitize = function(value)\n    {\n      return value;\n    };\n\n    try\n    {\n      $sce = $injector.get('$sce');\n\n      sanitize = function(value)\n      {\n        return $sce.getTrustedHtml( $sce.trustAsHtml( value ) );\n      };\n    }\n    catch (e)\n    {\n      // ignore\n    }\n\n    return function(scope, element, attrs)\n    {\n      scope.$watch( attrs.smHtml, function(value)\n      {\n        element.html( sanitize( value || '' ) );\n      });\n    };\n  }\n\n})( angular.module('semantic-ui-core', []) );\n","(function(app)\n{\n\n  app\n    .factory('SemanticCheckboxLink', ['SemanticUI', SemanticCheckboxLink])\n    .directive('giCheckboxBind', ['SemanticUI', SemanticCheckboxBind])\n    .directive('giCheckbox', ['SemanticCheckboxLink', SemanticCheckbox])\n  ;\n\n  var BEHAVIORS = {\n    giCheckboxToggle:            'toggle',\n    giCheckboxCheck:             'check',\n    giCheckboxUncheck:           'uncheck',\n    giCheckboxIndeterminate:     'indeterminate',\n    giCheckboxDeterminate:       'determinate',\n    giCheckboxEnable:            'enable',\n    giCheckboxDisable:           'disable'\n  };\n\n  angular.forEach( BEHAVIORS, function(method, directive)\n  {\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\n    {\n      return SemanticUI.createBehavior( directive, 'checkbox', method );\n    }]);\n  });\n\n  function SemanticCheckboxBind(SemanticUI)\n  {\n    return SemanticUI.createBind( 'giCheckboxBind', 'checkbox' );\n  }\n\n  function SemanticCheckbox(SemanticCheckboxLink)\n  {\n    return {\n\n      restrict: 'E',\n\n      replace: true,\n\n      transclude: true,\n\n      scope: {\n        /* Required */\n        model: '=',\n        label: '@',\n        /* Optional */\n        settings: '=',\n        enabled: '=',\n        indeterminateValue: '=',\n        checkedValue: '=',\n        uncheckedValue: '=',\n        children: '@',\n        onInit: '=',\n        /* Events */\n        onChange:        '=',\n        onChecked:       '=',\n        onIndeterminate: '=',\n        onDeterminate:   '=',\n        onUnchecked:     '=',\n        onEnable:        '=',\n        onDisable:       '='\n      },\n\n      template: [\n        '<div class=\"ui checkbox\">',\n        '  <input type=\"checkbox\">',\n        '  <label>{{ label }}</label>',\n        '</div>'\n      ].join('\\n'),\n\n      link: SemanticCheckboxLink\n    };\n  }\n\n  function SemanticCheckboxLink(SemanticUI)\n  {\n    return function(scope, element, attributes)\n    {\n      element.ready(function()\n      {\n        var settings = scope.settings || {};\n\n        SemanticUI.linkSettings( scope, element, attributes, 'checkbox', true );\n\n        SemanticUI.triggerChange( scope, 'model', element, true );\n\n        var checkedValue = function() {\n          return angular.isDefined( scope.checkedValue ) ? scope.checkedValue : true;\n        };\n        var uncheckedValue = function() {\n          return angular.isDefined( scope.uncheckedValue ) ? scope.uncheckedValue : false;\n        };\n        var indeterminateValue = function() {\n          return angular.isDefined( scope.indeterminateValue ) ? scope.indeterminateValue : void 0;\n        };\n\n        if ( attributes.enabled )\n        {\n          var enabledWatcher = SemanticUI.watcher( scope, 'enabled',\n            function(updated) {\n              if ( angular.isDefined( updated ) ) {\n                element.checkbox( updated ? 'set enabled' : 'set disabled' );\n              }\n            }\n          );\n\n          SemanticUI.onEvent( settings, 'onEnable',\n            function(value) {\n              enabledWatcher.set( true );\n            }\n          );\n\n          SemanticUI.onEvent( settings, 'onDisable',\n            function(value) {\n              enabledWatcher.set( false );\n            }\n          );\n        }\n\n        var modelWatcher = SemanticUI.watcher( scope, 'model',\n          function(updated) {\n            if ( angular.isDefined( updated ) ) {\n              element.checkbox( updated ? 'set checked' : 'set unchecked' );\n            }\n          }\n        );\n\n        SemanticUI.onEvent( settings, 'onChecked',\n          function() {\n            modelWatcher.set( checkedValue() );\n          }\n        );\n\n        SemanticUI.onEvent( settings, 'onUnchecked',\n          function() {\n            modelWatcher.set( uncheckedValue() );\n          }\n        );\n\n        SemanticUI.onEvent( settings, 'onIndeterminate',\n          function() {\n            modelWatcher.set( indeterminateValue() );\n          }\n        );\n\n        SemanticUI.linkEvents( scope, settings, $.fn.checkbox.settings, {\n          onChange:        'onChange',\n          onChecked:       'onChecked',\n          onIndeterminate: 'onIndeterminate',\n          onDeterminate:   'onDeterminate',\n          onUnchecked:     'onUnchecked',\n          onEnable:        'onEnable',\n          onDisable:       'onDisable'\n        });\n\n        // If the checkbox has children, link the value of this checkbox to the children\n        if ( scope.children )\n        {\n          var $children = $( scope.children );\n          var settingChildren = false;\n\n          SemanticUI.onEvent( settings, 'onChecked',\n            function() {\n              settingChildren = true;\n              $children.checkbox( 'check' );\n              settingChildren = false;\n            }\n          );\n          SemanticUI.onEvent( settings, 'onUnchecked',\n            function() {\n              settingChildren = true;\n              $children.checkbox( 'uncheck' );\n              settingChildren = false;\n            }\n          );\n\n          $children.children('input[type=checkbox], input[type=radio]')\n            .change(function() {\n\n              if ( settingChildren ) {\n                return;\n              }\n\n              var checked = 0;\n\n              $children.each(function(i, child) {\n                if ( $( child ).checkbox( 'is checked') ) {\n                  checked++;\n                }\n              });\n\n              if ( checked === 0 ) {\n                element.checkbox( 'uncheck' );\n              }\n              else if ( checked === $children.length ) {\n                element.checkbox( 'check' );\n              }\n              else {\n                element.checkbox( 'indeterminate' );\n              }\n            })\n          ;\n        }\n\n        // Initialize the element with the given settings.\n        element.checkbox( settings );\n\n        // Set initial state of the checkbox\n        if ( scope.model == checkedValue() )\n        {\n          element.checkbox( 'set checked' );\n        }\n        else if ( scope.model === indeterminateValue() )\n        {\n          element.checkbox( 'set indeterminate' );\n        }\n\n        if ( angular.isDefined( scope.enabled ) && !scope.enabled )\n        {\n          element.checkbox( 'set disabled' );\n        }\n\n        if ( angular.isFunction( scope.onInit ) ) {\n          scope.onInit( element );\n        }\n      });\n    };\n  }\n\n})( angular.module('semantic-ui-checkbox', ['semantic-ui-core']) );\n","(function(app)\n{\n\n  app\n    .controller('SemanticDropdownController', ['$scope', SemanticDropdownController])\n    .factory('SemanticDropdownLink', ['SemanticUI', '$timeout', SemanticDropdownLink])\n    .directive('giDropdownBind', ['SemanticUI', SemanticDropdownBind])\n    .directive('giDropdown', ['SemanticDropdownLink', SemanticDropdown])\n  ;\n\n  var BEHAVIORS = {\n    giDropdownToggle:               'toggle',\n    giDropdownShow:                 'show',\n    giDropdownHide:                 'hide',\n    giDropdownClear:                'clear',\n    giDropdownHideOthers:           'hide others',\n    giDropdownRestoreDefaults:      'restore defaults',\n    giDropdownRestoreDefaultText:   'restore default text',\n    giDropdownRestoreDefaultValue:  'restore default value',\n    giDropdownSaveDefaults:         'save defaults',\n    giDropdownSetSelected:          'set selected',\n    giDropdownSetText:              'set text',\n    giDropdownSetValue:             'set value',\n    giDropdownBindTouchEvents:      'bind touch events',\n    giDropdownMouseEvents:          'mouse events',\n    giDropdownBindIntent:           'bind intent',\n    giDropdownUnbindIntent:         'unbind intent',\n    giDropdownSetActive:            'set active',\n    giDropdownSetVisible:           'set visible',\n    giDropdownRemoveActive:         'remove active',\n    giDropdownRemoveVisible:        'remove visible'\n  };\n\n  angular.forEach( BEHAVIORS, function(method, directive)\n  {\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\n    {\n      return SemanticUI.createBehavior( directive, 'dropdown', method );\n    }]);\n  });\n\n  function SemanticDropdownBind(SemanticUI)\n  {\n    return SemanticUI.createBind( 'giDropdownBind', 'dropdown' );\n  }\n\n  function SemanticDropdown(SemanticDropdownLink)\n  {\n    return {\n\n      restrict: 'E',\n\n      replace: true,\n\n      transclude: true,\n\n      scope: {\n        /* Required */\n        model: '=',\n        items: '=',\n        label: '&',\n        value: '&',\n        /* Optional */\n        settings: '=',\n        defaultText: '=',\n        onInit: '=',\n        emptyValue: '=',\n        /* Events */\n        onChange: '=',\n        onAdd: '=',\n        onRemove: '=',\n        onLabelCreate: '=',\n        onLabelSelect: '=',\n        onNoResults: '=',\n        onShow: '=',\n        onHide: '='\n      },\n\n      template: [\n        '<div class=\"ui dropdown\">',\n          '<i class=\"dropdown icon\"></i>',\n          '<div class=\"text\" ng-class=\"::{default: hasDefault()}\" sm-html=\"::getDefaultText()\"></div>',\n          '<sm-flat-menu></sm-flat-menu>',\n        '</div>'\n      ].join('\\n'),\n\n      controller: 'SemanticDropdownController',\n\n      link: SemanticDropdownLink\n    };\n  }\n\n  function SemanticDropdownController($scope)\n  {\n    var hashMap = {};\n\n    // Returns the value to be placed in the data-value attribute. If the computed value has a $$hashKey,\n    // then return the hashKey. This enables the exact instance of the item to be set to the model.\n    $scope.getValue = function(item)\n    {\n      // Computes the value given the expression in the 'value' attribute\n      return $scope.getKey( $scope.value( {item: item} ) );\n    };\n\n    $scope.getKey = function(value)\n    {\n      return (value ? value.$$hashKey || value : value) + '';\n    };\n\n    $scope.isEmpty = function()\n    {\n      return !$scope.model || $scope.model.length === 0;\n    };\n\n    // Translates the value (the model, an item of the model, or a variable\n    // created from the value function) into the key that's stored on the dropdown.\n    $scope.translateValue = function(value)\n    {\n      var translated = $scope.getKey( value );\n      var matching = $scope.findMatchingItem( translated );\n\n      if ( angular.isDefined( matching ) )\n      {\n        return $scope.getValue( matching );\n      }\n    };\n\n    // Determines whether this dropdown should currently display the default text.\n    $scope.hasDefault = function()\n    {\n      return ( $scope.defaultText && $scope.isEmpty() );\n    };\n\n    // Gets the current text for the drop down. If the current model has a value which is found\n    // in the items, the appropriate item's label is displayed. Otherwise return the default text.\n    $scope.getDefaultText = function()\n    {\n      var defaultText = $scope.defaultText ? $scope.defaultText : '';\n      return ( $scope.isEmpty() ? defaultText : $scope.translateValue($scope.findMatchingItem($scope.model)) );\n    };\n\n    // Finds an item instance that has the exact same value as the given value.\n    $scope.findMatchingItem = function(value)\n    {\n      return hashMap[ value ];\n    };\n\n    // Updates the hash map providing a mapping from values to items.\n    $scope.updateHashMap = function( items )\n    {\n      hashMap = {};\n\n      angular.forEach( items, function(item)\n      {\n        hashMap[ $scope.getValue( item ) ] = item;\n      });\n    };\n  }\n\n  function SemanticDropdownLink(SemanticUI, $timeout)\n  {\n    return function (scope, element, attributes) {\n      var applyValue = function (value) {\n        $timeout(function () {\n          if (value === null) {\n            element.dropdown('clear');\n          } else if(value === false){\n            // Do nothing\n          }\n          else if (element.dropdown('is multiple')) {\n            if (value instanceof Array) {\n              var translatedValue = [];\n\n              for (var i = 0; i < value.length; i++) {\n                var translated = scope.translateValue(value[ i ]);\n\n                if (angular.isDefined(translated)) {\n                  translatedValue.push(translated);\n                }\n              }\n\n              element.dropdown('set exactly', translatedValue);\n            }\n          } else {\n            element.dropdown('set selected', scope.translateValue(value));\n          }\n        }, 0);\n      };\n\n      SemanticUI.setDefaultFunction( scope, 'label', attributes, function(locals){return locals.item} );\n      SemanticUI.setDefaultFunction( scope, 'value', attributes, function(locals){return locals.item} );\n\n      element.ready(function()\n      {\n        var settings = scope.settings || {};\n        var ignoreChange = true;\n\n        SemanticUI.linkSettings( scope, element, attributes, 'dropdown', true );\n\n        SemanticUI.triggerChange( scope, 'model', element, true );\n\n        // Returns the model on the scope, converting it to an array if it's not one.\n        var modelArray = function() {\n          if ( !(scope.model instanceof Array) ) {\n            scope.model = scope.model ? [ scope.model ] : [];\n          }\n          return scope.model;\n        };\n\n        // When the model changes, set the value on the drop down\n        var modelWatcher = SemanticUI.watcher( scope, 'model',\n          function(updated) {\n            applyValue( updated );\n          }\n        , null, true, true );\n\n        // Inject an onChange function into the settings which sets the model value\n        // and causes the scope to be updated.\n        SemanticUI.onEvent( settings, 'onChange',\n          function(value) {\n            if ( ignoreChange ) {\n              return;\n            }\n            if ( !element.dropdown('is multiple') ) {\n              var mapped = scope.findMatchingItem( value );\n              if (angular.isDefined(mapped)) {\n                var mappedValue = scope.value({item: mapped});\n                modelWatcher.set( mappedValue );\n              } else if ( element.dropdown('setting', 'allowAdditions') ) {\n                modelWatcher.set( value );\n              } else {\n                modelWatcher.set( scope.emptyValue );\n              }\n            }\n          }\n        );\n\n        // When a new item is selected for multiple selection dropdowns, add it to the model.\n        SemanticUI.onEvent( settings, 'onAdd',\n          function(value) {\n            if ( ignoreChange ) {\n              return;\n            }\n            var mapped = scope.findMatchingItem( value );\n            if (angular.isDefined(mapped)) {\n              var mappedValue = scope.value({item: mapped});\n              var indexOf = $.inArray( mappedValue, modelArray() );\n              if ( indexOf === -1 ) {\n                scope.model.push( mappedValue );\n                modelWatcher.update();\n              }\n            } else if ( element.dropdown('setting', 'allowAdditions') ) {\n              scope.model.push( value );\n              modelWatcher.update();\n            }\n          }\n        );\n\n        // When an item is deselected for multiple selection dropdowns, remove it from the model.\n        SemanticUI.onEvent( settings, 'onRemove',\n          function(value) {\n            if ( ignoreChange ) {\n              return;\n            }\n            var mapped = scope.findMatchingItem( value );\n            if (angular.isDefined(mapped)) {\n              var mappedValue = scope.value({item: mapped});\n              var indexOf = $.inArray( mappedValue, modelArray() );\n              if ( indexOf !== -1 ) {\n                scope.model.splice( indexOf, 1 );\n                modelWatcher.update();\n              }\n            } else {\n              var indexOf = $.inArray( value, modelArray() );\n              if ( indexOf !== -1 ) {\n                scope.model.splice( indexOf, 1 );\n                modelWatcher.update();\n              }\n            }\n          }\n        );\n\n        SemanticUI.linkEvents( scope, settings, $.fn.dropdown.settings, {\n          onChange:       'onChange',\n          onAdd:          'onAdd',\n          onRemove:       'onRemove',\n          onLabelCreate:  'onLabelCreate',\n          onLabelSelect:  'onLabelSelect',\n          onNoResults:    'onNoResults',\n          onShow:         'onShow',\n          onHide:         'onHide'\n        });\n\n        // When items changes, rebuild the hashMap & reapply the values.\n        scope.$watch( 'items', function( updated )\n        {\n          scope.updateHashMap( scope.items );\n          applyValue( scope.model );\n\n        }, true );\n\n        // Initialize the element with the given settings.\n        element.dropdown( settings );\n\n        // Update the hashmap with items\n        scope.updateHashMap( scope.items );\n\n        // Apply current value\n        applyValue( scope.model );\n\n        // Save defaults\n        element.dropdown( 'save defaults' );\n\n        // Stop ignoring changes!\n        ignoreChange = false;\n\n        // Notify initialized callback.\n        if ( angular.isFunction( scope.onInit ) )\n        {\n          scope.onInit( element );\n        }\n\n      });\n    };\n  }\n\n})( angular.module('semantic-ui-dropdown', ['semantic-ui-core']) );\n","(function(app)\n{\n\n  app\n    .factory('SemanticRadioLink', ['SemanticUI', SemanticRadioLink])\n    .directive('giRadioBind', ['SemanticUI', SemanticRadioBind])\n    .directive('giRadio', ['SemanticRadioLink', SemanticRadio])\n  ;\n\n  var BEHAVIORS = {\n    giRadioCheck:             'check',\n    giRadioEnable:            'enable',\n    giRadioDisable:           'disable'\n  };\n\n  angular.forEach( BEHAVIORS, function(method, directive)\n  {\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\n    {\n      return SemanticUI.createBehavior( directive, 'checkbox', method );\n    }]);\n  });\n\n  function SemanticRadioBind(SemanticUI)\n  {\n    return SemanticUI.createBind( 'giRadioBind', 'checkbox' );\n  }\n\n  function SemanticRadio(SemanticRadioLink)\n  {\n    return {\n\n      restrict: 'E',\n\n      replace: true,\n\n      transclude: true,\n\n      scope: {\n        /* Required */\n        model: '=',\n        label: '@',\n        name: '@',\n        value: '=',\n        /* Optional */\n        settings: '=',\n        enabled: '=',\n        onInit: '=',\n        /* Events */\n        onChange:        '=',\n        onChecked:       '=',\n        onUnchecked:     '=',\n        onEnable:        '=',\n        onDisable:       '='\n      },\n\n      template: [\n        '<div class=\"ui radio checkbox\">',\n        '  <input name=\"{{ name }}\" type=\"radio\">',\n        '  <label>{{ label }}</label>',\n        '</div>'\n      ].join('\\n'),\n\n      link: SemanticRadioLink\n    };\n  }\n\n  function SemanticRadioLink(SemanticUI)\n  {\n    return function(scope, element, attributes)\n    {\n      element.ready(function()\n      {\n        var settings = scope.settings || {};\n\n        SemanticUI.linkSettings( scope, element, attributes, 'checkbox', true );\n\n        SemanticUI.triggerChange( scope, 'model', element, true );\n\n        if ( attributes.enabled )\n        {\n          var enabledWatcher = SemanticUI.watcher( scope, 'enabled',\n            function(updated) {\n              if ( angular.isDefined( updated ) ) {\n                element.checkbox( updated ? 'set enabled' : 'set disabled' );\n              }\n            }\n          );\n\n          SemanticUI.onEvent( settings, 'onEnable',\n            function(value) {\n              enabledWatcher.set( true );\n            }\n          );\n\n          SemanticUI.onEvent( settings, 'onDisable',\n            function(value) {\n              enabledWatcher.set( false );\n            }\n          );\n        }\n\n        var modelWatcher = SemanticUI.watcher( scope, 'model',\n          function(updated) {\n            if ( updated === scope.value ) {\n              element.checkbox( 'set checked' );\n            }\n          }\n        );\n\n        SemanticUI.onEvent( settings, 'onChecked',\n          function() {\n            modelWatcher.set( scope.value );\n          }\n        );\n\n        SemanticUI.linkEvents( scope, settings, $.fn.checkbox.settings, {\n          onChange:        'onChange',\n          onChecked:       'onChecked',\n          onUnchecked:     'onUnchecked',\n          onEnable:        'onEnable',\n          onDisable:       'onDisable'\n        });\n\n        // Initialize the element with the given settings.\n        element.checkbox( settings );\n\n        // Set initial state of the radio\n        if ( scope.model === scope.value )\n        {\n          element.checkbox( 'set checked' );\n        }\n\n        // If the radio is a slider, remove the radio class\n        if ( element.hasClass( 'slider' ) )\n        {\n          element.removeClass( 'radio' );\n        }\n\n        if ( angular.isDefined( scope.enabled ) && !scope.enabled )\n        {\n          element.checkbox( 'set disabled' );\n        }\n\n        if ( angular.isFunction( scope.onInit ) ) {\n          scope.onInit( element );\n        }\n      });\n    };\n  }\n\n})( angular.module('semantic-ui-radio', ['semantic-ui-core']) );\n"]}